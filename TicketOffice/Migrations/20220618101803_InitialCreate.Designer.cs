// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketOffice.Data;

#nullable disable

namespace TicketOffice.Migrations
{
    [DbContext(typeof(TicketOfficeContext))]
    [Migration("20220618101803_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("TicketOffice.Models.Route", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("Capacity")
                    .HasColumnType("INTEGER");

                b.Property<int>("Number")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.ToTable("Route");
            });

            modelBuilder.Entity("TicketOffice.Models.RouteCity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("ArrivalTime")
                    .HasColumnType("TEXT");

                b.Property<double?>("CostFromPreviousCity")
                    .HasColumnType("REAL");

                b.Property<DateTime?>("DepartureTime")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(24)
                    .HasColumnType("TEXT");

                b.Property<int>("RouteId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("RouteId");

                b.ToTable("RouteCity");
            });

            modelBuilder.Entity("TicketOffice.Models.Ticket", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("OderDate")
                    .HasColumnType("TEXT");

                b.Property<string>("PassengerFirstName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("PassengerLastName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("PassengerPlace")
                    .HasColumnType("INTEGER");

                b.Property<int>("RouteId")
                    .HasColumnType("INTEGER");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("RouteId");

                b.HasIndex("UserId");

                b.ToTable("Ticket");
            });

            modelBuilder.Entity("TicketOffice.Models.TicketCity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("ArrivalTime")
                    .HasColumnType("TEXT");

                b.Property<double?>("CostFromPreviousCity")
                    .HasColumnType("REAL");

                b.Property<DateTime?>("DepartureTime")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(24)
                    .HasColumnType("TEXT");

                b.Property<int>("TicketId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("TicketId");

                b.ToTable("TicketCity");
            });

            modelBuilder.Entity("TicketOffice.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(48)
                    .HasColumnType("TEXT");

                b.Property<bool>("IsManager")
                    .HasColumnType("INTEGER");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("User");
            });

            modelBuilder.Entity("TicketOffice.Models.RouteCity", b =>
            {
                b.HasOne("TicketOffice.Models.Route", "Route")
                    .WithMany("Cities")
                    .HasForeignKey("RouteId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Route");
            });

            modelBuilder.Entity("TicketOffice.Models.Ticket", b =>
            {
                b.HasOne("TicketOffice.Models.Route", "Route")
                    .WithMany("Tickets")
                    .HasForeignKey("RouteId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("TicketOffice.Models.User", "User")
                    .WithMany("Tickets")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Route");

                b.Navigation("User");
            });

            modelBuilder.Entity("TicketOffice.Models.TicketCity", b =>
            {
                b.HasOne("TicketOffice.Models.Ticket", "Ticket")
                    .WithMany("Cities")
                    .HasForeignKey("TicketId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Ticket");
            });

            modelBuilder.Entity("TicketOffice.Models.Route", b =>
            {
                b.Navigation("Cities");

                b.Navigation("Tickets");
            });

            modelBuilder.Entity("TicketOffice.Models.Ticket", b =>
            {
                b.Navigation("Cities");
            });

            modelBuilder.Entity("TicketOffice.Models.User", b =>
            {
                b.Navigation("Tickets");
            });
#pragma warning restore 612, 618
        }
    }
}
